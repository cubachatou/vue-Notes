/*MIXINS*/

//Font connection
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../../fonts/#{$file_name}.woff2") format("woff2"), url("../../fonts/#{$file_name}.woff") format("woff");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}

//Currency
@mixin currency($sym) {
	&::after {
		content: "#{$sym}";
	}
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Adaptive property (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// For calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Brak points in EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Floating value formula
	// Source: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	// Obtaining property value
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	// If negative values
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// If clamp() supported;
	@supports (#{$property}: $propertyValue) {
		#{$property}: $propertyValue;
	}
	// If clamp() isn't supported;
	@supports not (#{$property}: $propertyValue) {
		#{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
	}

	// Setting default values
	@if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: inherit;
		}
	}
	@if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: inherit;
		}
	}
}
